/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package contributors

import kotlinx.coroutines.*
import java.awt.event.ActionEvent
import javax.swing.*
import shmuly.networking.createGitHubService
import java.awt.*
import java.io.BufferedReader
import java.io.IOException
import java.io.InputStreamReader

/**
 *
 * @author shmue
 */

val stoppedString = "Refresh rate (in seconds) (Stopped):"
val startedString = "Refresh rate (in seconds) (Started):"
@InternalCoroutinesApi
class Notification : JFrame() {
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    var localCommits = mutableListOf<String>()
    val token = "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"

    private fun updateLocalCommits(directory:String = /*"C:\\Users\\shmue\\OneDrive\\Documents\\GitHub\\Therapy-Toolkit-Database"*/System.getProperty("user.dir")): MutableList<String> {
        val builder = ProcessBuilder(
            "cmd.exe", "/c", "cd $directory && git log --name-status"
        )
        builder.redirectErrorStream(true)
        val p = builder.start()
        val r = BufferedReader(InputStreamReader(p.inputStream))
        var line: String?

        val firstTimeFilling = localCommits.isEmpty()
        var localUpToDate = true
        while (true) {
            line = r.readLine()
            if (line == null) {
                break
            }
            if(line.length == 47 && line.startsWith("commit")) {
                val element = line.substringAfter("commit ")
                if (element in localCommits) {
                    break
                } else {
                    if(!firstTimeFilling) localUpToDate = false
                    println("commit $element not in local commits")
                    localCommits.add(element)
                }
            }
        }
        //if(localUpToDate) println("Local commits up to date.")//this is not working correctly
        return localCommits
    }
val service = createGitHubService()
    fun checkForUpdate(){
        val cloudCommit = runBlocking{service.getLatestCommit().body()!!.sha}

        if(cloudCommit !in updateLocalCommits()){
            println("cloudCommit not in local, cloudCommit=$cloudCommit, local=$localCommits")
            if(!displayedNotificationOnce || displayNotificationEveryTime) {
                displayNotification()
                displayedNotificationOnce = true
            }
        }
        else println("Local up-to-date")
    }
var mTime: Long? = null
    fun getMTime(): Long {
        return (mTime ?: time!!.text.toInt().toLong().also{mTime = it})* 1000
    }
    var startTime = 0L

    @InternalCoroutinesApi
    fun loopForUpdates(): Job {
       return CoroutineScope(Dispatchers.Default).launch {
           while(NonCancellable.isActive){
               checkForUpdate()
               delay(getMTime())
           }
       }
    }
    var trayIcon: TrayIcon? = null
    @Throws(AWTException::class)
    fun addTrayToSystem() {
        //Obtain only one instance of the SystemTray object
        val tray = SystemTray.getSystemTray()

        //If the icon is a file
        val image = Toolkit.getDefaultToolkit().createImage("C:\\Users\\shmue\\OneDrive\\IdeaProjects\\SVGtoJPEG\\diagnosis predictor-backup.jpg")
        //Alternative (if the icon is on the classpath):
        //Image image = Toolkit.getDefaultToolkit().createImage(getClass().getResource("icon.png"));
        val trayIcon = TrayIcon(image, "Therapy Toolkit Database Creation Tool")
        //Let the system resize the image if needed
        trayIcon.isImageAutoSize = true
        //Set tooltip text for the tray icon
        trayIcon.toolTip = "Therapy Toolkit Database Creation Tool"
        trayIcon.addActionListener { Runtime.getRuntime().exec("C:\\Users\\shmue\\AppData\\Local\\GitHubDesktop\\GitHubDesktop.exe") }
        tray.add(trayIcon)
        this.trayIcon = trayIcon
    }

    private fun displayNotification() {
        trayIcon?.displayMessage(
            "Pull new commit",
            "A new commit is available in the cloud to pull",
            TrayIcon.MessageType.INFO
        )
    }

    @Throws(IOException::class)
    fun textboxMessage(message: String, title: String?, messageType: Int = JOptionPane.ERROR_MESSAGE) {
        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName())
        JOptionPane.showMessageDialog(
            null,
            message,
            title,
            messageType
        )
    }

    var displayNotificationEveryTime = true
    var displayedNotificationOnce = false
    @InternalCoroutinesApi
    private fun initComponents() {
        jLabel1 = JLabel()
        time = JTextField()
        start = JButton()
        stop = JButton().apply{isEnabled = false}
        jRadioButton1 = JRadioButton()
        jRadioButton2 = JRadioButton()
        defaultCloseOperation = WindowConstants.EXIT_ON_CLOSE
        jLabel1!!.font = Font("Tahoma", 0, 18) // NOI18N
        jLabel1!!.text = stoppedString
        time!!.text = "10"
        time!!.addActionListener {
            mTime = time!!.text.toInt().toLong()
        }
        start!!.text = "Start"
        stop!!.text = "Stop"
        jRadioButton1!!.text = "Display notification every refresh"
        jRadioButton2!!.text = "Display notification only once"
        jRadioButton1!!.isSelected = true
        jRadioButton1!!.addActionListener {
            jRadioButton2!!.isSelected = false
            displayNotificationEveryTime = true
        }
        jRadioButton2!!.addActionListener {
            jRadioButton1!!.isSelected = false
            displayNotificationEveryTime = false
        }
        var job: Job? = null
        start!!.addActionListener {
            if (SystemTray.isSupported()) {
                addTrayToSystem()
                job = loopForUpdates()
                startTime = System.nanoTime()
                start!!.isEnabled = false
                stop!!.isEnabled = true
                jLabel1!!.text = startedString
            }
            else textboxMessage("System notification not supported!", "Notification not supported", JOptionPane.ERROR_MESSAGE)
        }
        stop!!.addActionListener {
            job?.cancel()
            start!!.isEnabled = true
            stop!!.isEnabled = false
            jLabel1!!.text = stoppedString
        }
        val layout = GroupLayout(contentPane)
        contentPane.layout = layout
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(
                                    layout.createSequentialGroup()
                                        .addComponent(jRadioButton1)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jRadioButton2)
                                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE.toInt())
                                )
                                .addGroup(
                                    layout.createSequentialGroup()
                                        .addGroup(
                                            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel1)
                                                .addComponent(
                                                    start,
                                                    GroupLayout.PREFERRED_SIZE,
                                                    108,
                                                    GroupLayout.PREFERRED_SIZE
                                                )
                                        )
                                        .addPreferredGap(
                                            LayoutStyle.ComponentPlacement.RELATED,
                                            GroupLayout.DEFAULT_SIZE,
                                            Short.MAX_VALUE.toInt()
                                        )
                                        .addGroup(
                                            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                .addComponent(
                                                    stop,
                                                    GroupLayout.DEFAULT_SIZE,
                                                    GroupLayout.DEFAULT_SIZE,
                                                    Short.MAX_VALUE.toInt()
                                                )
                                                .addComponent(time)
                                        )
                                        .addGap(8, 8, 8)
                                )
                        )
                )
        )
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(
                                    time,
                                    GroupLayout.PREFERRED_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.PREFERRED_SIZE
                                )
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(jRadioButton1)
                                .addComponent(jRadioButton2)
                        )
                        .addPreferredGap(
                            LayoutStyle.ComponentPlacement.RELATED,
                            GroupLayout.DEFAULT_SIZE,
                            Short.MAX_VALUE.toInt()
                        )
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                .addComponent(start, GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE.toInt())
                                .addComponent(
                                    stop,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                        )
                        .addContainerGap()
                )
        )
        pack()
    } // </editor-fold>                        

    private fun timeActionPerformed(evt: ActionEvent) {
        // TODO add your handling code here:
    }

    private fun stopActionPerformed(evt: ActionEvent) {
        // TODO add your handling code here:
    }

    // Variables declaration - do not modify                     
    private var jLabel1: JLabel? = null
    private var jRadioButton1: JRadioButton? = null
    private var jRadioButton2: JRadioButton? = null
    private var start: JButton? = null
    private var stop: JButton? = null
    private var time: JTextField? = null // End of variables declaration                   

    companion object {
        /**
         * @param args the command line arguments
         */
        @JvmStatic
        fun main(args: Array<String>) {
            /* Set the Nimbus look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName())
            //</editor-fold>

            /* Create and display the form */EventQueue.invokeLater {
                Notification().apply{
                    isVisible = true
                    minimumSize = Dimension(480,80)
                    preferredSize = Dimension(480,80)
                }
            }
        }
    }

    /**
     * Creates new form Notification
     */
    init {
        initComponents()
    }
}